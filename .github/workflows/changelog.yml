name: Update Changelog

on:
  push:
    branches: [main]
  pull_request:
    types: [closed]
    branches: [main]

jobs:
  update-changelog:
    if: github.event_name == 'push' || (github.event.pull_request.merged == true)
    runs-on: ubuntu-latest

    permissions:
      contents: write
      pull-requests: read

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Fetch full history for git log
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Get latest tag
        id: latest-tag
        run: |
          # Get the latest tag, default to v0.0.0 if none exists
          LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
          echo "tag=$LATEST_TAG" >> $GITHUB_OUTPUT
          echo "Latest tag: $LATEST_TAG"

      - name: Get commits since last tag
        id: commits
        run: |
          # Get commits since the latest tag
          LATEST_TAG="${{ steps.latest-tag.outputs.tag }}"
          if [ "$LATEST_TAG" = "v0.0.0" ]; then
            # If no previous tags, get all commits from the beginning
            COMMITS=$(git log --pretty=format:"- %s (%h)" --reverse)
          else
            # Get commits since the latest tag
            COMMITS=$(git log $LATEST_TAG..HEAD --pretty=format:"- %s (%h)" --reverse)
          fi

          # Save to file to handle multiline output
          echo "$COMMITS" > commits.txt
          echo "Commits since $LATEST_TAG:"
          cat commits.txt

      - name: Get current version from package.json
        id: version
        run: |
          VERSION=$(node -p "require('./package.json').version")
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Current version: $VERSION"

      - name: Update CHANGELOG.md
        run: |
          VERSION="${{ steps.version.outputs.version }}"
          DATE=$(date +%Y-%m-%d)

          # Check if commits.txt exists and has content
          if [ -f commits.txt ] && [ -s commits.txt ]; then
            # Create temporary file with new changelog entry
            cat > temp_changelog.md << EOF
          # Changelog

          All notable changes to this project will be documented in this file.

          The format is based on [Keep a Changelog](https://keepachangelog.com/en/1.0.0/),
          and this project adheres to [Semantic Versioning](https://semver.org/spec/v2.0.0.html).

          ## [Unreleased]

          ## [$VERSION] - $DATE

          ### Changes
          $(cat commits.txt)

          EOF

            # Append existing changelog content (skip header and unreleased section)
            if [ -f CHANGELOG.md ]; then
              # Find line number where version entries start (after "## [Unreleased]")
              LINE_NUM=$(grep -n "^## \[.*\] -" CHANGELOG.md | head -1 | cut -d: -f1)
              if [ -n "$LINE_NUM" ]; then
                tail -n +$LINE_NUM CHANGELOG.md >> temp_changelog.md
              fi
            fi
            
            # Replace original changelog
            mv temp_changelog.md CHANGELOG.md
            
            echo "Updated CHANGELOG.md with version $VERSION"
          else
            echo "No new commits found, skipping changelog update"
          fi

      - name: Check for changes
        id: check-changes
        run: |
          if git diff --quiet CHANGELOG.md; then
            echo "changed=false" >> $GITHUB_OUTPUT
            echo "No changes to commit"
          else
            echo "changed=true" >> $GITHUB_OUTPUT
            echo "Changes detected in CHANGELOG.md"
          fi

      - name: Commit and push changes
        if: steps.check-changes.outputs.changed == 'true'
        run: |
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'

          git add CHANGELOG.md
          git commit -m "docs: update changelog for v${{ steps.version.outputs.version }}"
          git push

      - name: Clean up
        run: |
          rm -f commits.txt temp_changelog.md
